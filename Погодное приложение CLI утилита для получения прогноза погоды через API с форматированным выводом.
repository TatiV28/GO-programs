package main

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"strings"
	"time"
)

type WeatherResponse struct {
	Location struct {
		Name    string `json:"name"`
		Country string `json:"country"`
		Region  string `json:"region"`
	} `json:"location"`
	Current struct {
		TempC       float64 `json:"temp_c"`
		TempF       float64 `json:"temp_f"`
		Condition   struct {
			Text string `json:"text"`
			Icon string `json:"icon"`
		} `json:"condition"`
		Humidity    int     `json:"humidity"`
		WindKph     float64 `json:"wind_kph"`
		WindDir     string  `json:"wind_dir"`
		Pressure    float64 `json:"pressure_mb"`
		FeelsLikeC  float64 `json:"feelslike_c"`
		UV          float64 `json:"uv"`
		Visibility  float64 `json:"vis_km"`
	} `json:"current"`
	Forecast struct {
		Forecastday []struct {
			Date string `json:"date"`
			Day  struct {
				MaxTempC  float64 `json:"maxtemp_c"`
				MinTempC  float64 `json:"mintemp_c"`
				Condition struct {
					Text string `json:"text"`
				} `json:"condition"`
				ChanceOfRain int `json:"daily_chance_of_rain"`
			} `json:"day"`
		} `json:"forecastday"`
	} `json:"forecast"`
}

type WeatherApp struct {
	apiKey string
	client *http.Client
}

func NewWeatherApp(apiKey string) *WeatherApp {
	return &WeatherApp{
		apiKey: apiKey,
		client: &http.Client{Timeout: 10 * time.Second},
	}
}

func main() {
	if len(os.Args) < 2 {
		showUsage()
		os.Exit(1)
	}

	// API –∫–ª—é—á –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞ weatherapi.com –±–µ—Å–ø–ª–∞—Ç–Ω–æ
	apiKey := os.Getenv("WEATHER_API_KEY")
	if apiKey == "" {
		// –î–µ–º–æ —Ä–µ–∂–∏–º –±–µ–∑ API –∫–ª—é—á–∞
		fmt.Println("‚ö†Ô∏è  API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ–º–æ —Ä–µ–∂–∏–º")
		handleDemoMode(os.Args[1])
		return
	}

	location := strings.Join(os.Args[1:], " ")
	app := NewWeatherApp(apiKey)

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
	switch os.Args[1] {
	case "current", "now":
		if len(os.Args) < 3 {
			fmt.Println("‚ùå –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥")
			fmt.Println("–ü—Ä–∏–º–µ—Ä: weather current Moscow")
			os.Exit(1)
		}
		location = strings.Join(os.Args[2:], " ")
		app.getCurrentWeather(location)
	case "forecast":
		if len(os.Args) < 3 {
			fmt.Println("‚ùå –£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥")
			fmt.Println("–ü—Ä–∏–º–µ—Ä: weather forecast London")
			os.Exit(1)
		}
		location = strings.Join(os.Args[2:], " ")
		app.getForecast(location)
	default:
		// –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ –∫–æ–º–∞–Ω–¥–∞, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ –≥–æ—Ä–æ–¥–æ–º
		app.getCurrentWeather(location)
	}
}

func showUsage() {
	fmt.Println("üå§Ô∏è  –ü–æ–≥–æ–¥–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
	fmt.Println("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: go run main.go <–∫–æ–º–∞–Ω–¥–∞> <–≥–æ—Ä–æ–¥>")
	fmt.Println("\n–ö–æ–º–∞–Ω–¥—ã:")
	fmt.Println("  current, now <–≥–æ—Ä–æ–¥>    - –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞")
	fmt.Println("  forecast <–≥–æ—Ä–æ–¥>        - –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è")
	fmt.Println("  <–≥–æ—Ä–æ–¥>                 - –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ (–∫—Ä–∞—Ç–∫–∞—è —Ñ–æ—Ä–º–∞)")
	fmt.Println("\n–ü—Ä–∏–º–µ—Ä—ã:")
	fmt.Println("  go run main.go current Moscow")
	fmt.Println("  go run main.go forecast \"New York\"")
	fmt.Println("  go run main.go London")
	fmt.Println("\n‚öôÔ∏è  –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è WEATHER_API_KEY")
	fmt.Println("   (–ø–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á –Ω–∞ https://weatherapi.com)")
	fmt.Println("   export WEATHER_API_KEY=your_api_key_here")
}

func (wa *WeatherApp) getCurrentWeather(location string) {
	fmt.Printf("üå§Ô∏è  –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–≥–æ–¥—ã –¥–ª—è: %s\n", location)
	
	url := fmt.Sprintf("http://api.weatherapi.com/v1/current.json?key=%s&q=%s&aqi=no", 
		wa.apiKey, location)

	weather, err := wa.makeRequest(url)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: %v\n", err)
		return
	}

	wa.displayCurrentWeather(weather)
}

func (wa *WeatherApp) getForecast(location string) {
	fmt.Printf("üìÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –¥–ª—è: %s\n", location)
	
	url := fmt.Sprintf("http://api.weatherapi.com/v1/forecast.json?key=%s&q=%s&days=3&aqi=no", 
		wa.apiKey, location)

	weather, err := wa.makeRequest(url)
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: %v\n", err)
		return
	}

	wa.displayCurrentWeather(weather)
	wa.displayForecast(weather)
}

func (wa *WeatherApp) makeRequest(url string) (*WeatherResponse, error) {
	resp, err := wa.client.Get(url)
	if err != nil {
		return nil, fmt.Errorf("—Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: %v", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode == 400 {
		return nil, fmt.Errorf("–≥–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
	}
	if resp.StatusCode == 401 {
		return nil, fmt.Errorf("–Ω–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á")
	}
	if resp.StatusCode != 200 {
		return nil, fmt.Errorf("API –≤–µ—Ä–Ω—É–ª –∫–æ–¥: %d", resp.StatusCode)
	}

	body, err := io.ReadAll(resp.Body)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %v", err)
	}

	var weather WeatherResponse
	if err := json.Unmarshal(body, &weather); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: %v", err)
	}

	return &weather, nil
}

func (wa *WeatherApp) displayCurrentWeather(weather *WeatherResponse) {
	fmt.Printf("\n%s\n", strings.Repeat("=", 60))
	fmt.Printf("üèôÔ∏è  –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ –≤ %s, %s\n", 
		weather.Location.Name, weather.Location.Country)
	if weather.Location.Region != "" {
		fmt.Printf("üìç –†–µ–≥–∏–æ–Ω: %s\n", weather.Location.Region)
	}
	fmt.Printf("%s\n", strings.Repeat("-", 60))

	// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é –ø–æ–≥–æ–¥—ã
	weatherIcon := getWeatherIcon(weather.Current.Condition.Text)
	
	fmt.Printf("%s %s\n", weatherIcon, weather.Current.Condition.Text)
	fmt.Printf("üå°Ô∏è  –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: %.1f¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ %.1f¬∞C)\n", 
		weather.Current.TempC, weather.Current.FeelsLikeC)
	fmt.Printf("üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: %d%%\n", weather.Current.Humidity)
	fmt.Printf("üí® –í–µ—Ç–µ—Ä: %.1f –∫–º/—á %s\n", 
		weather.Current.WindKph, weather.Current.WindDir)
	fmt.Printf("üìä –î–∞–≤–ª–µ–Ω–∏–µ: %.0f –º–±\n", weather.Current.Pressure)
	fmt.Printf("üëÅÔ∏è  –í–∏–¥–∏–º–æ—Å—Ç—å: %.1f –∫–º\n", weather.Current.Visibility)
	fmt.Printf("‚òÄÔ∏è  –£–§-–∏–Ω–¥–µ–∫—Å: %.1f\n", weather.Current.UV)
	
	fmt.Printf("%s\n", strings.Repeat("=", 60))
}

func (wa *WeatherApp) displayForecast(weather *WeatherResponse) {
	if len(weather.Forecast.Forecastday) == 0 {
		return
	}

	fmt.Printf("\nüìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è:\n")
	fmt.Printf("%s\n", strings.Repeat("-", 60))

	for i, day := range weather.Forecast.Forecastday {
		date, _ := time.Parse("2006-01-02", day.Date)
		dayName := getDayName(i)
		
		weatherIcon := getWeatherIcon(day.Day.Condition.Text)
		
		fmt.Printf("%s %s (%s)\n", 
			dayName, date.Format("02.01.2006"), weatherIcon)
		fmt.Printf("   %s\n", day.Day.Condition.Text)
		fmt.Printf("   üå°Ô∏è  %.1f¬∞C ... %.1f¬∞C\n", 
			day.Day.MinTempC, day.Day.MaxTempC)
		if day.Day.ChanceOfRain > 0 {
			fmt.Printf("   üåßÔ∏è  –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–∂–¥—è: %d%%\n", 
				day.Day.ChanceOfRain)
		}
		fmt.Println()
	}
}

func getDayName(index int) string {
	switch index {
	case 0:
		return "üïê –°–µ–≥–æ–¥–Ω—è   "
	case 1:
		return "üìÖ –ó–∞–≤—Ç—Ä–∞   "
